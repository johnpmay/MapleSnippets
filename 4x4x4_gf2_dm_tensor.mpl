# This is the 4x4x4 GF_2 tensor from https://www.nature.com/articles/s41586-022-05172-4
# imported from https://github.com/deepmind/alphatensor/tree/main/algorithms
# and converted into the form used by the FMM catalog https://fmm.univ-lille.fr/

A:=Matrix(4, 4, [[A_1_1,A_1_2,A_1_3,A_1_4],[A_2_1,A_2_2,A_2_3,A_2_4],[A_3_1,A_3_2,A_3_3,A_3_4],[A_4_1,A_4_2,A_4_3,A_4_4]]):
B:=Matrix(4, 4, [[B_1_1,B_1_2,B_1_3,B_1_4],[B_2_1,B_2_2,B_2_3,B_2_4],[B_3_1,B_3_2,B_3_3,B_3_4],[B_4_1,B_4_2,B_4_3,B_4_4]]):
C:=Matrix(4, 4, [[C_1_1,C_1_2,C_1_3,C_1_4],[C_2_1,C_2_2,C_2_3,C_2_4],[C_3_1,C_3_2,C_3_3,C_3_4],[C_4_1,C_4_2,C_4_3,C_4_4]]):

# generated from the Tensor below with
# tmp := seq(LinearAlgebra:-Trace(LinearAlgebra:-Transpose(op([1,i,1,1],Tensor)).A)
#           *LinearAlgebra:-Trace(LinearAlgebra:-Transpose(op([1,i,1,2],Tensor)).B)
#           *LinearAlgebra:-Transpose(op([1,i,1,3],Tensor)),
#        i=1..47):
# MUL := [seq((cat(`m_`,i)=convert(tmp[i],set)[2]),i=1..47)];
# ADD := [seq(seq(cat(`C_`,i,`_`,j)=add(ifelse(tmp[k][i,j]<>0,cat(`m_`,k),0),k=1..47),j=1..4),i=1..4)];

MUL := [
m_1  =  A_1_3*B_3_1,
m_2  = (A_2_2 + A_1_3 + A_2_3)*(B_2_1 + B_2_4 + B_3_4),
m_3  = (A_2_1 + A_1_3 + A_2_3)*(B_1_1 + B_1_3 + B_3_3),
m_4  = (A_1_3 + A_2_3)*(B_1_1 + B_2_1 + B_3_1 + B_1_3 + B_3_3 + B_2_4 + B_3_4),
m_5  =  A_1_1*B_1_1,
m_6  = (A_1_1 + A_3_1)*(B_1_1 + B_2_1 + B_3_1 + B_1_2 + B_3_2 + B_1_4 + B_2_4),
m_7  = (A_1_1 + A_3_1 + A_3_3)*(B_3_1 + B_1_2 + B_3_2),
m_8  = (A_1_1 + A_3_1 + A_1_2 + A_2_2 + A_3_2 + A_1_3 + A_2_3)*(B_2_1 + B_2_4),
m_9  = (A_4_1 + A_1_2 + A_4_2)*(B_1_1 + B_1_3 + B_2_3),
m_10 = (A_1_2 + A_4_2 + A_4_3)*(B_3_1 + B_2_2 + B_3_2),
m_11 = (A_1_2 + A_4_2)*(B_1_1 + B_2_1 + B_3_1 + B_2_2 + B_3_2 + B_1_3 + B_2_3),
m_12 = (A_1_1 + A_2_1 + A_4_1 + A_1_2 + A_4_2 + A_1_3 + A_2_3)*(B_1_1 + B_1_3),
m_13 = (A_1_1 + A_3_1 + A_1_2 + A_4_2 + A_1_3 + A_3_3 + A_4_3)*(B_3_1 + B_3_2),
m_14 = (A_4_1)*(B_4_1 + B_1_2 + B_4_2 + B_1_3 + B_2_3),
m_15 = (A_4_1 + A_1_4 + A_4_4)*(B_4_1 + B_1_2 + B_4_2),
m_16 = (A_1_4 + A_4_4)*(B_4_1 + B_1_2 + B_4_2 + B_3_3 + B_4_3),
m_17 = (A_1_1 + A_3_1 + A_3_2)*(B_2_1 + B_1_4 + B_2_4),
m_18 = (A_4_1 + A_3_2 + A_1_4 + A_3_4 + A_4_4)*(B_4_1 + B_4_2),
m_19 = (A_3_2 + A_1_4 + A_3_4)*(B_4_1 + B_2_2 + B_4_2),
m_20 = (A_1_4 + A_3_4)*(B_4_1 + B_2_2 + B_4_2 + B_3_4 + B_4_4),
m_21 = (A_2_2)*(B_4_1 + B_2_3 + B_4_3 + B_2_4 + B_3_4),
m_22 = (A_2_2 + A_1_4 + A_2_4)*(B_4_1 + B_2_3 + B_4_3),
m_23 = (A_4_3 + A_1_4 + A_4_4)*(B_4_1 + B_3_3 + B_4_3),
m_24 = (A_2_1 + A_2_3 + A_4_3 + A_1_4 + A_4_4)*B_3_3,
m_25 = (A_2_2 + A_4_3 + A_1_4 + A_3_4)*(B_4_1 + B_2_2 + B_4_3 + B_3_4),
m_26 = (A_3_3)*(B_4_1 + B_1_2 + B_3_2 + B_3_4 + B_4_4),
m_27 = (A_1_4 + A_2_4)*(B_4_1 + B_2_3 + B_4_3 + B_1_4 + B_4_4),
m_28 = (A_2_1 + A_1_4 + A_2_4)*(B_4_1 + B_1_4 + B_4_4),
m_29 = (A_3_2 + A_4_2 + A_4_3 + A_1_4 + A_3_4)*B_2_2,
m_30 = (A_2_2 + A_4_3 + A_1_4 + A_2_4 + A_4_4)*(B_4_1 + B_4_3),
m_31 =  A_1_4*B_4_1,
m_32 = (A_3_3 + A_1_4 + A_3_4)*(B_4_1 + B_3_4 + B_4_4),
m_33 = (A_2_1 + A_3_1 + A_4_1)*(B_1_2 + B_1_3 + B_1_4),
m_34 = (A_4_1 + A_2_2 + A_4_2 + A_1_4 + A_2_4)*B_2_3,
m_35 = (A_2_4 + A_3_4 + A_4_4)*(B_4_2 + B_4_3 + B_4_4),
m_36 = (A_2_2 + A_2_3 + A_3_3 + A_1_4 + A_3_4)*B_3_4,
m_37 = (A_2_3 + A_3_3 + A_4_3)*(B_3_2 + B_3_3 + B_3_4),
m_38 = (A_2_2 + A_3_2 + A_4_2)*(B_2_2 + B_2_3 + B_2_4),
m_39 =  A_1_2*B_2_1,
m_40 = (A_2_1 + A_3_3 + A_1_4 + A_2_4 + A_3_4)*(B_4_1 + B_4_4),
m_41 = (A_4_3)*(B_4_1 + B_2_2 + B_3_2 + B_3_3 + B_4_3),
m_42 = (A_2_1)*(B_4_1 + B_1_3 + B_3_3 + B_1_4 + B_4_4),
m_43 = (A_2_1 + A_3_1 + A_3_2 + A_1_4 + A_2_4)*B_1_4,
m_44 = (A_4_1 + A_3_2 + A_1_4 + A_2_4)*(B_4_1 + B_4_2 + B_2_3 + B_1_4),
m_45 = (A_3_2)*(B_4_1 + B_2_2 + B_4_2 + B_1_4 + B_2_4),
m_46 = (A_2_1 + A_3_3 + A_1_4 + A_4_4)*(B_4_1 + B_1_2 + B_3_3 + B_4_4),
m_47 = (A_3_1 + A_4_1 + A_3_3 + A_1_4 + A_4_4)*B_1_2
];

ADD := [
C_1_1 = m_1 + m_5 + m_31 + m_39,
C_1_2 = m_1 + m_7 + m_10 + m_13 + m_15 + m_18 + m_19 + m_29 + m_31 + m_47,
C_1_3 = m_3 + m_5 + m_9 + m_12 + m_22 + m_23 + m_24 + m_30 + m_31 + m_34,
C_1_4 = m_2 + m_8 + m_17 + m_28 + m_31 + m_32 + m_36 + m_39 + m_40 + m_43,
C_2_1 = m_1 + m_2 + m_3 + m_4 + m_21 + m_22 + m_27 + m_28 + m_31 + m_42,
C_2_2 = m_16 + m_20 + m_23 + m_24 + m_25 + m_26 + m_30 + m_32 + m_35 + m_36 + m_37 + m_40 + m_41 + m_46,
C_2_3 = m_22 + m_23 + m_24 + m_27 + m_28 + m_30 + m_31 + m_42,
C_2_4 = m_21 + m_22 + m_27 + m_28 + m_31 + m_32 + m_36 + m_40,
C_3_1 = m_5 + m_6 + m_7 + m_17 + m_19 + m_20 + m_26 + m_31 + m_32 + m_45,
C_3_2 = m_15 + m_18 + m_19 + m_20 + m_26 + m_31 + m_32 + m_47,
C_3_3 = m_14 + m_15 + m_16 + m_18 + m_27 + m_28 + m_33 + m_35 + m_40 + m_42 + m_43 + m_44 + m_46 + m_47,
C_3_4 = m_19 + m_20 + m_28 + m_31 + m_32 + m_40 + m_43 + m_45,
C_4_1 = m_9 + m_10 + m_11 + m_14 + m_15 + m_16 + m_23 + m_31 + m_39 + m_41,
C_4_2 = m_15 + m_16 + m_18 + m_19 + m_23 + m_29 + m_31 + m_41,
C_4_3 = m_14 + m_15 + m_16 + m_22 + m_23 + m_30 + m_31 + m_34,
C_4_4 = m_18 + m_19 + m_20 + m_21 + m_22 + m_25 + m_27 + m_29 + m_30 + m_34 + m_35 + m_38 + m_44 + m_45
];

#Check
map(expand,subs(subs(MUL,ADD),C-A.B)) mod 2;


# Tensor Form

# converted from the DM tensor (u,v,w) by
# Tensor := TriadSet([seq(Triad([Matrix(4,4,u[..,i]),Matrix(4,4,v[..,i]),Matrix(4,4,w[..,i])]),i=1..47)]);


Tensor := TriadSet([
Triad([
    Matrix(4, 4, [[0, 0, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[1, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])
    ]),
Triad([
    Matrix(4, 4, [[0, 0, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [1, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 1, 0], [1, 0, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[1, 0, 1, 0], [0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 1, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[1, 0, 1, 0], [1, 0, 0, 1], [1, 0, 1, 1], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[1, 0, 1, 0], [0, 0, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[1, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[1, 1, 0, 1], [1, 0, 0, 1], [1, 1, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[1, 0, 0, 0], [0, 0, 0, 0], [1, 0, 1, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 1, 0, 0], [0, 0, 0, 0], [1, 1, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 1, 0], [1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[1, 1, 1, 0], [0, 1, 1, 0], [1, 1, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [1, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 1, 0, 0]]),
    Matrix(4, 4, [[1, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 1], [0, 0, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 1, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 1, 0, 0], [1, 1, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 0, 0]]),
    Matrix(4, 4, [[1, 0, 1, 0], [1, 1, 1, 0], [1, 1, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[1, 1, 1, 0], [1, 0, 1, 0], [0, 0, 0, 0], [1, 1, 0, 0]]),
    Matrix(4, 4, [[1, 0, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[1, 1, 1, 0], [0, 0, 0, 0], [1, 0, 1, 0], [0, 1, 1, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [1, 1, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]]),
    Matrix(4, 4, [[0, 1, 1, 0], [0, 0, 1, 0], [0, 0, 0, 0], [1, 1, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 1, 1], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 1]]),
    Matrix(4, 4, [[0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 1, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 1], [1, 0, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]]),
    Matrix(4, 4, [[0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [1, 1, 1, 0]]),
    Matrix(4, 4, [[0, 0, 0, 1], [0, 1, 0, 1], [0, 0, 1, 1], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[1, 0, 0, 0], [0, 0, 0, 0], [1, 1, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 1], [1, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [0, 0, 0, 0], [0, 1, 0, 1], [1, 0, 0, 1]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 1, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [1, 0, 1, 1], [0, 0, 1, 0], [0, 0, 0, 1]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [0, 0, 0, 0], [0, 1, 0, 1], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0], [1, 1, 0, 0]]),
    Matrix(4, 4, [[0, 0, 1, 0], [1, 0, 1, 1], [0, 0, 0, 0], [0, 0, 1, 1]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1], [1, 1, 0, 1]]),
    Matrix(4, 4, [[0, 0, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0], [0, 0, 1, 1]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 1, 1], [0, 0, 0, 1], [1, 0, 1, 0]]),
    Matrix(4, 4, [[0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 0, 1]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [0, 1, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0], [1, 0, 1, 0]]),
    Matrix(4, 4, [[0, 1, 0, 0], [0, 0, 0, 0], [1, 1, 0, 1], [0, 1, 0, 1]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 1]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [1, 0, 1, 0]]),
    Matrix(4, 4, [[0, 0, 0, 1], [0, 1, 0, 1], [1, 1, 0, 1], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [1, 0, 1, 0], [0, 0, 0, 0], [0, 0, 1, 1]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 1, 0, 0], [1, 1, 0, 0], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [0, 1, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 1, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 1, 0, 0], [0, 0, 0, 0], [0, 1, 0, 1], [1, 0, 0, 1]]),
    Matrix(4, 4, [[0, 0, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 0, 0], [1, 0, 1, 1]]),
    Matrix(4, 4, [[0, 1, 0, 0], [0, 0, 0, 0], [0, 1, 1, 0], [0, 1, 0, 1]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [1, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 1]]),
    Matrix(4, 4, [[0, 1, 0, 0], [0, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [0, 0, 0, 0], [0, 1, 0, 1], [0, 1, 1, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [1, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 1]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [0, 1, 0, 1], [0, 0, 0, 0], [0, 0, 1, 1]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 1, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 1, 0, 0], [1, 1, 0, 1], [0, 0, 0, 1]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]]),
    Matrix(4, 4, [[1, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 1, 1], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1], [1, 0, 0, 1]]),
    Matrix(4, 4, [[0, 0, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0], [1, 1, 1, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0]]),
    Matrix(4, 4, [[0, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [0, 1, 0, 1], [0, 0, 0, 0], [1, 1, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 1], [0, 0, 0, 1]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 1, 1]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [0, 1, 1, 0], [0, 0, 1, 1], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0], [1, 1, 0, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 1, 1], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]])]),
Triad([
    Matrix(4, 4, [[0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[1, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [1, 0, 0, 1], [0, 0, 1, 1], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 1]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [1, 1, 1, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 1, 0, 0], [0, 1, 1, 0], [1, 0, 1, 0]]),
    Matrix(4, 4, [[0, 0, 0, 1], [0, 1, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 1, 1], [0, 0, 0, 0], [0, 0, 1, 0], [1, 0, 0, 1]]),
    Matrix(4, 4, [[0, 1, 0, 0], [0, 0, 0, 0], [0, 1, 1, 0], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [1, 0, 0, 1], [1, 1, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [1, 0, 1, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 0, 0], [1, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 0, 0], [1, 1, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 1], [0, 1, 0, 1], [0, 0, 0, 0], [1, 1, 0, 0]]),
    Matrix(4, 4, [[0, 0, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 1]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]),
    Matrix(4, 4, [[0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [1, 0, 0, 1]]),
    Matrix(4, 4, [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]])]),
Triad([
    Matrix(4, 4, [[0, 0, 0, 1], [0, 0, 0, 0], [1, 0, 1, 0], [1, 0, 0, 1]]),
    Matrix(4, 4, [[0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]),
    Matrix(4, 4, [[0, 0, 0, 0], [1, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 0]])])
]);

# Check
map(expand,
    A.B - add( LinearAlgebra:-Trace(LinearAlgebra:-Transpose(op([1,i,1,1],Tensor)).A)
              *LinearAlgebra:-Trace(LinearAlgebra:-Transpose(op([1,i,1,2],Tensor)).B)
              *LinearAlgebra:-Transpose(op([1,i,1,3],Tensor))
          ,i=1..47)
    ) mod 2;
